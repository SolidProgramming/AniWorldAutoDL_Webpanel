@inject IUpdateService UpdateService

@if (UpdateInProgress)
{
    <HxProgress Height="3">
        <HxProgressBar Value="UpdateProgress" Color="ThemeColor.Success" />
    </HxProgress>
}

@if (!UpdateDownloadFinished)
{
    <div class="p-3">
        @if (CheckingForUpdates)
        {
            <div class="text-center">
                <HxSpinner CssClass="align-middle" Color="ThemeColor.Secondary" Size="SpinnerSize.Small"></HxSpinner>
                <h6 class="text-secondary align-middle ms-2 d-inline">Updates prüfen...</h6>
            </div>
        }
        else
        {
            @if (UpdateAvailable)
            {
                <div class="text-center">
                    @if (!UpdateInProgress)
                    {
                        <h6 class="text-warning me-2 align-middle d-inline">Es ist ein neues Update verfügbar!</h6>
                        <HxButton Icon="BootstrapIcon.FileEarmarkZip" Size="ButtonSize.Small" CssClass="me-2 align-middle d-inline" Color="ThemeColor.Success" OnClick="DownloadUpdate">Update</HxButton>
                        <a target="_blank" href="@UpdateDetails.Changelog">
                            <HxButton Icon="BootstrapIcon.FileTextFill" Size="ButtonSize.Small" CssClass="align-middle d-inline" Color="ThemeColor.Secondary">Patchnotes</HxButton>
                        </a>
                    }
                    else
                    {
                        <HxSpinner CssClass="align-middle me-2" Color="ThemeColor.Secondary" Size="SpinnerSize.Small"></HxSpinner>
                        <h6 class="text-secondary align-middle d-inline">Updates laden...</h6>
                    }
                </div>
            }
        }
    </div>
}

@code {
    private bool CheckingForUpdates { get; set; }
    private bool UpdateAvailable { get; set; }
    private bool UpdateInProgress { get; set; }
    private bool UpdateDownloadFinished { get; set; }
    private UpdateDetailsModel? UpdateDetails;

    private float UpdateProgress = 0f;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckForUpdates();
        }
    }

    private async Task CheckForUpdates()
    {
        CheckingForUpdates = true;
        StateHasChanged();

        string assemblyVersion = typeof(Program).Assembly.GetName().Version.ToString();
        (UpdateAvailable, UpdateDetails) = await UpdateService.CheckForUpdates(assemblyVersion);

        await Task.Delay(5000);

        CheckingForUpdates = false;
        StateHasChanged();
    }

    private async Task DownloadUpdate()
    {
        UpdateDownloadFinished = false;
        UpdateProgress = 0f;

        UpdateInProgress = true;
        StateHasChanged();

        for (int i = 0; i < 15; i++)
        {
            UpdateProgress += 6.666f;
            StateHasChanged();
            await Task.Delay(new Random().Next(150, 800));
        }

        UpdateInProgress = false;
        UpdateDownloadFinished = true;
        StateHasChanged();
    }
}
