@using Microsoft.AspNetCore.Components.Rendering
@using System.Net
@attribute [Route(Routes.Dashboard)]
@attribute [Route(Routes.Index)]
@inject IHxMessengerService ToastService
@inject ILogger<DashboardPage> DashboardLogger
@inject ILogger<CronJob> CronJobLogger
@inject IApiService ApiService
@inject IConverterService CS
@inject NavigationManager NavigationManager

<div class="container">
    <table class="table">
        <thead>
            <tr>
                <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">Status</th>
                <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">Name</th>
                <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">Staffel</th>
                <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">Episode</th>
                <th scope="col" class="text-center"></th>
                <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">%</th>
                <th scope="col"></th>
                <th scope="col"></th>
                <th scope="col" class="text-center"></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td class="text-center align-middle" width="50">
                    @switch (ConverterState)
                    {
                        case ConverterState.Downloading:
                            <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small"></HxSpinner>
                            break;
                        case ConverterState.Idle:
                            @if (ConverterState == ConverterState.Idle && CronJobState == CronJobState.WaitForNextCycle)
                            {
                                <HxIcon Icon="BootstrapIcon.Hourglass"></HxIcon>
                            }
                            else
                            {
                                <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small"></HxSpinner>
                            }
                            break;
                        default:
                            break;
                    }

                </td>
                <td class="text-center align-middle" width="600" style="font-family: 'Roboto', sans-serif;">
                    @if (Download is not null)
                    {
                        @Download.Name
                    }
                    else
                    {
                        <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                    }
                </td>
                <td class="text-center align-middle" width="70" style="font-family: 'Roboto', sans-serif;">
                    @if (Download is not null)
                    {
                        @($"S{Download.Season:D2}")
                    }
                    else
                    {
                        <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                    }
                </td>
                <td class="text-center align-middle" width="70" style="font-family: 'Roboto', sans-serif;">
                    @if (Download is not null)
                    {
                        @($"E{Download.Episode:D2}")
                    }
                    else
                    {
                        <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                    }
                </td>
                <td class="text-center align-middle" width="90">
                    @if (Download is not null)
                    {
                        <LanguageFlagComponent Languages="@Download.LanguageFlag"></LanguageFlagComponent>
                    }
                    else
                    {
                        <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                    }
                </td>
                <td class="text-center align-middle" width="250">
                    <HxProgress>
                        @if (ConvertProgress is not null)
                        {
                            <HxProgressBar Value="ConvertProgress.ProgressPercent" Color="ThemeColor.Success" />
                        }
                        else
                        {
                            <HxProgressBar Value="0" Color="ThemeColor.Success" />
                        }
                    </HxProgress>
                </td>
                <td class="text-center align-middle" width="50">
                    <HxButton Enabled="StopConverterButtonEnabled" Color="ThemeColor.Warning" Icon="BootstrapIcon.StopFill" OnClick="StopConverter"></HxButton>
                </td>
                <td class="text-center align-middle" width="50">
                    <HxButton Enabled="EditConverterSettingsButtonEnabled" Color="ThemeColor.Secondary" Icon="BootstrapIcon.PencilFill" OnClick="@MoveToConverterSettings"></HxButton>
                </td>
                <td class="text-center align-middle" width="50">
                    <HxButton Spinner="CheckDownloadsButtonSpinner" Enabled="CheckDownloadsButtonEnabled" OnClick="CheckForDownloads" Color="ThemeColor.Success" Icon="BootstrapIcon.ArrowClockwise"></HxButton>
                </td>
            </tr>
        </tbody>
    </table>
    <div class="container">
        <p class="" style="float: right !important;">
            Nächste Prüfung:
            @if (NextCronJobCycle is not null)
            {
                <b>
                    <span>
                        @($"{NextCronJobCyleTime}")
                    </span>
                    @if (!string.IsNullOrEmpty(TimeUntilCycleText))
                    {
                        <span>@($" (in {TimeUntilCycleText})")</span>
                    }
                </b>
            }
            else
            {
                <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
            }
        </p>
    </div>
</div>



@code {
    ConvertProgressModel? ConvertProgress;
    DownloadModel? Download;
    ConverterState ConverterState = ConverterState.Idle;
    CronJobState CronJobState = CronJobState.WaitForNextCycle;

    CronJob? CronJob;

    bool CheckDownloadsButtonEnabled { get; set; } = true;
    bool CheckDownloadsButtonSpinner { get; set; } = false;

    bool EditConverterSettingsButtonEnabled { get; set; } = true;

    bool StopConverterButtonEnabled { get; set; } = false;

    DateTime? NextCronJobCycle = default;
    TimeOnly NextCronJobCyleTime;
    System.Timers.Timer? TmNextCycle;
    TimeSpan? TimeUntilCycle;
    string? TimeUntilCycleText;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ConverterState = ConverterService.GetConverterState();

            if (Download is null)
                Download = ConverterService.GetDownload();

            if (CronJob is null)
                CronJob = new(CronJobLogger, ApiService, CS);

            CheckCronJobState();

            CronJob.CronJobEvent += CronJobEvent;

            ConverterService.ConvertProgressChanged += Converter_ConvertProgressChanged;
            ConverterService.ConverterStateChanged += Converter_ConverterStateChanged;

            if (TmNextCycle is null)
            {
                TmNextCycle = new()
                    {
                        AutoReset = true,
                        Interval = 1000
                    };

                TmNextCycle.Elapsed += RefreshCycleTime;
            }

            if (!TmNextCycle.Enabled)
            {
                TmNextCycle.Start();
            }
        }

        base.OnAfterRender(firstRender);
    }

    private void RefreshCycleTime(Object? source, System.Timers.ElapsedEventArgs e)
    {
        if (NextCronJobCycle < DateTime.Now)
        {
            TimeUntilCycle = new TimeSpan(0, 0, 0);
        }
        else
        {
            TimeUntilCycle = NextCronJobCycle?.Subtract(DateTime.Now);
        }

        TimeUntilCycleText = "";

        if (TimeUntilCycle?.Hours > 0)
        {
            TimeUntilCycleText = $"{TimeUntilCycle:hh} Stunden";
        }

        if (TimeUntilCycle?.Minutes > 0)
        {
            TimeUntilCycleText += $"{TimeUntilCycle:mm} Minuten";
        }

        if (TimeUntilCycle?.Seconds > 0)
        {
            TimeUntilCycleText += $"{TimeUntilCycle:ss} Sekunden";
        }

        InvokeAsync(() => StateHasChanged());
    }

    private void CheckCronJobState()
    {
        CronJobState cronJobState = CronJob.GetCronJobState();

        HandleCronJobState(cronJobState);
    }

    private void MoveToConverterSettings()
    {
        NavigationManager.NavigateTo(Routes.ConverterSettings);
    }

    private void Converter_ConvertProgressChanged(ConvertProgressModel convertProgress)
    {
        ConvertProgress = convertProgress;
        InvokeAsync(() => StateHasChanged());
    }

    private void CronJobEvent(CronJobState jobState, int downloadCount = 0)
    {
        if (CronJob.NextRun is null)
            return;

        NextCronJobCycle = CronJob.NextRun.Value;
        NextCronJobCyleTime = TimeOnly.FromDateTime(NextCronJobCycle.Value);
        HandleCronJobState(jobState);
    }

    private void HandleCronJobState(CronJobState jobState)
    {
        CronJobState = jobState;

        switch (jobState)
        {
            case CronJobState.WaitForNextCycle:
                CheckDownloadsButtonEnabled = true;
                CheckDownloadsButtonSpinner = false;
                StopConverterButtonEnabled = false;
                EditConverterSettingsButtonEnabled = true;
                break;

            case CronJobState.Running:
                CheckDownloadsButtonEnabled = false;
                CheckDownloadsButtonSpinner = false;
                StopConverterButtonEnabled = true;
                EditConverterSettingsButtonEnabled = false;
                break;

            case CronJobState.CheckForDownloads:
                CheckDownloadsButtonEnabled = false;
                CheckDownloadsButtonSpinner = true;
                ToastService.AddMessage(InfoMessage.CheckingForDownloads, 2000);
                break;
            default:
                break;
        }

        InvokeAsync(() => StateHasChanged());
    }

    private void Converter_ConverterStateChanged(ConverterState state, DownloadModel? download)
    {
        ConverterState = state;

        switch (state)
        {
            case ConverterState.Downloading:
                if (download is null)
                {
                    DashboardLogger.LogWarning($"{DateTime.Now} | {WarningMessage.ConverterDownloadStateNoData}");
                }
                else
                {
                    Download = download;
                }
                break;
            case ConverterState.Idle:
                Download = default;
                ConvertProgress = default;
                break;
            case ConverterState.Undefined:
            default:
                return;
        }

        InvokeAsync(() => StateHasChanged());
    }

    private async Task CheckForDownloads()
    {
        if (CronJob is null)
            return;

        await CronJob.CheckForNewDownloads();
    }

    private void StopConverter()
    {
        ConverterService.Abort();
    }
}