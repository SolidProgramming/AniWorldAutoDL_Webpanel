@attribute [Route(Routes.Dashboard)]
@attribute [Route(Routes.Index)]
@inject IHxMessengerService ToastService
@inject IApiService ApiService
@inject NavigationManager NavigationManager

<div class="container">
    <table class="table">
        <thead>
            <tr>
                <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">Status</th>
                <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">Name</th>
                <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">Staffel</th>
                <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">Episode</th>
                <th scope="col" class="text-center"></th>
                <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">Progress</th>
                <th scope="col"></th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td class="text-center align-middle" width="50">
                    @switch (ConverterState)
                    {
                        case ConverterState.Downloading:
                            <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small"></HxSpinner>
                            break;
                        case ConverterState.Idle:
                            <HxIcon Icon="BootstrapIcon.Hourglass"></HxIcon>
                            break;
                        default:
                            break;
                    }
                </td>
                <td class="text-center align-middle" width="600" style="font-family: 'Roboto', sans-serif;">
                    @if (Download is not null)
                    {
                        @Download.Name
                    }
                    else
                    {
                        <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                    }
                </td>
                <td class="text-center align-middle" width="70" style="font-family: 'Roboto', sans-serif;">
                    @if (Download is not null)
                    {
                        @($"S{Download.Season:D2}")
                    }
                    else
                    {
                        <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                    }
                </td>
                <td class="text-center align-middle" width="70" style="font-family: 'Roboto', sans-serif;">
                    @if (Download is not null)
                    {
                        @($"S{Download.Episode:D2}")
                    }
                    else
                    {
                        <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                    }
                </td>
                <td class="text-center align-middle" width="90">
                    @if (Download is not null)
                    {
                        <LanguageFlagComponent Languages="@Download.LanguageFlag"></LanguageFlagComponent>
                    }
                    else
                    {
                        <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                    }
                </td>
                <td class="text-center align-middle" width="250">
                    <HxProgress>
                        <HxProgressBar Value="ConvertProgress.ProgressPercent" Color="ThemeColor.Success" />
                    </HxProgress>
                </td>
                <td class="text-center align-middle" width="50">
                    <HxButton Color="ThemeColor.Warning" Icon="BootstrapIcon.StopFill"></HxButton>
                </td>
                <td class="text-center align-middle" width="50">
                    <HxButton Color="ThemeColor.Secondary" Icon="BootstrapIcon.PencilFill" OnClick="@MoveToConverterSettings"></HxButton>
                </td>
            </tr>
        </tbody>
    </table>
</div>



@code {
    ConvertProgressModel? ConvertProgress = new();
    DownloadModel? Download = default;
    ConverterState ConverterState = ConverterState.Idle;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Converter.ConvertStarted += Converter_ConvertStarted;
            Converter.ConvertProgressChanged += Converter_ConvertProgressChanged;
            Converter.ConverterStateChanged += Converter_ConverterStateChanged;
        }

        base.OnAfterRender(firstRender);
    }

    private void MoveToConverterSettings()
    {
        NavigationManager.NavigateTo(Routes.ConverterSettings);
    }

    private void Converter_ConvertStarted(DownloadModel download)
    {
        Download = download;
    }

    private void Converter_ConvertProgressChanged(ConvertProgressModel convertProgress)
    {
        ConvertProgress = convertProgress;
        InvokeAsync(() => StateHasChanged());
    }

    private void Converter_ConverterStateChanged(ConverterState state)
    {
        ConverterState = state;

        if (state == ConverterState.Idle)
        {
            Download = default;
        }

        InvokeAsync(() => StateHasChanged());
    }
}