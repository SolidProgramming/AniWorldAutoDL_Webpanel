@attribute [Route(Routes.Dashboard)]
@attribute [Route(Routes.Index)]
@inject IHxMessengerService ToastService
@inject IApiService ApiService
@inject NavigationManager NavigationManager
@inject ILogger<DashboardPage> Logger

<div class="container">
    <table class="table">
        <thead>
            <tr>
                <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">Status</th>
                <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">Name</th>
                <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">Staffel</th>
                <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">Episode</th>
                <th scope="col" class="text-center"></th>
                <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">Progress</th>
                <th scope="col"></th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td class="text-center align-middle" width="50">
                    @switch (ConverterState)
                    {
                        case ConverterState.Downloading:
                            <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small"></HxSpinner>
                            break;
                        case ConverterState.Idle:
                            <HxIcon Icon="BootstrapIcon.Hourglass"></HxIcon>
                            break;
                        default:
                            break;
                    }
                </td>
                <td class="text-center align-middle" width="600" style="font-family: 'Roboto', sans-serif;">
                    @if (Download is not null)
                    {
                        @Download.Name
                    }
                    else
                    {
                        <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                    }
                </td>
                <td class="text-center align-middle" width="70" style="font-family: 'Roboto', sans-serif;">
                    @if (Download is not null)
                    {
                        @($"S{Download.Season:D2}")
                    }
                    else
                    {
                        <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                    }
                </td>
                <td class="text-center align-middle" width="70" style="font-family: 'Roboto', sans-serif;">
                    @if (Download is not null)
                    {
                        @($"S{Download.Episode:D2}")
                    }
                    else
                    {
                        <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                    }
                </td>
                <td class="text-center align-middle" width="90">
                    @if (Download is not null)
                    {
                        <LanguageFlagComponent Languages="@Download.LanguageFlag"></LanguageFlagComponent>
                    }
                    else
                    {
                        <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                    }
                </td>
                <td class="text-center align-middle" width="250">
                    <HxProgress>
                        @if (ConvertProgress is not null)
                        {
                            <HxProgressBar Value="ConvertProgress.ProgressPercent" Color="ThemeColor.Success" />
                        }
                        else
                        {
                            <HxProgressBar Value="0" Color="ThemeColor.Success" />
                        }
                    </HxProgress>
                </td>
                <td class="text-center align-middle" width="50">
                    <HxButton Color="ThemeColor.Warning" Icon="BootstrapIcon.StopFill"></HxButton>
                </td>
                <td class="text-center align-middle" width="50">
                    <HxButton Color="ThemeColor.Secondary" Icon="BootstrapIcon.PencilFill" OnClick="@MoveToConverterSettings"></HxButton>
                </td>
            </tr>
        </tbody>
    </table>
</div>



@code {
    ConvertProgressModel? ConvertProgress;
    DownloadModel? Download;
    ConverterState ConverterState = ConverterState.Idle;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ConverterService.ConvertProgressChanged += Converter_ConvertProgressChanged;
            ConverterService.ConverterStateChanged += Converter_ConverterStateChanged;
        }

        base.OnAfterRender(firstRender);
    }

    private void MoveToConverterSettings()
    {
        NavigationManager.NavigateTo(Routes.ConverterSettings);
    }

    private void Converter_ConvertProgressChanged(ConvertProgressModel convertProgress)
    {
        ConvertProgress = convertProgress;
        InvokeAsync(() => StateHasChanged());
    }

    private void Converter_ConverterStateChanged(ConverterState state, DownloadModel? download)
    {
        ConverterState = state;

        switch (state)
        {
            case ConverterState.Downloading:
                if (download is null)
                {
                    Logger.LogWarning($"{DateTime.Now} | {WarningMessage.ConverterDownloadStateNoData}");
                }
                else
                {
                    Download = download;
                }
                break;
            case ConverterState.Idle:
                Download = default;
                ConvertProgress = default;
                break;
            case ConverterState.Undefined:
            default:
                return;
        }

        InvokeAsync(() => StateHasChanged());
    }
}