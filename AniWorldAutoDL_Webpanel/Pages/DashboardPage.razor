@using Microsoft.AspNetCore.Components.Rendering
@using System.Net
@attribute [Route(Routes.Dashboard)]
@attribute [Route(Routes.Index)]
@inject IHxMessengerService ToastService
@inject ILogger<DashboardPage> DashboardLogger
@inject ILogger<CronJob> CronJobLogger
@inject IApiService ApiService
@inject IConverterService CS
@inject NavigationManager NavigationManager
@inject IHostApplicationLifetime AppLifetime

<div class="container">
    <table class="table">
        <thead>
            <tr>
                <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">Status</th>
                <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">Name</th>
                <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">Staffel</th>
                <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">Episode</th>
                <th scope="col" class="text-center"></th>
                <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">%</th>
                <th scope="col"></th>
                <th scope="col"></th>
                <th scope="col" class="text-center"></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td class="text-center align-middle" width="50">
                    @switch (ConverterState)
                    {
                        case ConverterState.Downloading:
                            <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small"></HxSpinner>
                            break;
                        case ConverterState.Idle:
                        case ConverterState.Undefined:
                            @if (CronJobState == CronJobState.WaitForNextCycle)
                            {
                                <HxIcon Icon="BootstrapIcon.Hourglass"></HxIcon>
                            }
                            else
                            {
                                <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small"></HxSpinner>
                            }
                            break;
                        default:
                            break;
                    }

                </td>
                <td class="text-center align-middle" width="600" style="font-family: 'Roboto', sans-serif;">
                    @if (Download is not null)
                    {
                        @Download.Name
                    }
                    else
                    {
                        <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                    }
                </td>
                <td class="text-center align-middle" width="70" style="font-family: 'Roboto', sans-serif;">
                    @if (Download is not null)
                    {
                        @($"S{Download.Season:D2}")
                    }
                    else
                    {
                        <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                    }
                </td>
                <td class="text-center align-middle" width="70" style="font-family: 'Roboto', sans-serif;">
                    @if (Download is not null)
                    {
                        @($"E{Download.Episode:D2}")
                    }
                    else
                    {
                        <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                    }
                </td>
                <td class="text-center align-middle" width="90">
                    @if (Download is not null)
                    {
                        <LanguageFlagComponent Languages="@Download.LanguageFlag"></LanguageFlagComponent>
                    }
                    else
                    {
                        <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                    }
                </td>
                <td class="text-center align-middle" width="250">
                    <HxProgress>
                        @if (ConvertProgress is not null)
                        {
                            <HxProgressBar Value="ConvertProgress.ProgressPercent" Color="ThemeColor.Success" />
                        }
                        else
                        {
                            <HxProgressBar Value="0" Color="ThemeColor.Success" />
                        }
                    </HxProgress>
                </td>
                <td class="text-center align-middle" width="50">
                    <HxButton Enabled="StopConverterButtonEnabled" Color="ThemeColor.Warning" Icon="BootstrapIcon.StopFill" OnClick="StopConverter"></HxButton>
                </td>
                <td class="text-center align-middle" width="50">
                    <HxButton Enabled="EditConverterSettingsButtonEnabled" Color="ThemeColor.Secondary" Icon="BootstrapIcon.PencilFill" OnClick="@MoveToConverterSettings"></HxButton>
                </td>
                <td class="text-center align-middle" width="50">
                    <HxButton Spinner="CheckDownloadsButtonSpinner" Enabled="CheckDownloadsButtonEnabled" OnClick="CheckForDownloads" Color="ThemeColor.Success" Icon="BootstrapIcon.ArrowClockwise"></HxButton>
                </td>
            </tr>
        </tbody>
    </table>
    <div class="container">
        <div class="row">
            <div class="col d-flex justify-content-start">
                <h5 class="d-inline">
                    <HxBadge Type="BadgeType.RoundedPill" Color="ThemeColor.Success">
                        <HxIcon Icon="BootstrapIcon.FileEarmarkPlus"></HxIcon>
                        @DownloadQueCount
                    </HxBadge>
                </h5>
                <div class="align-middle ms-2">
                    <h5 class="d-inline align-middle">
                        <HxBadge Type="BadgeType.RoundedPill" Color="ThemeColor.Secondary">
                            <HxIcon Icon="BootstrapIcon.Translate"></HxIcon>
                            @LanguageDownloadCount
                        </HxBadge>
                    </h5>
                </div>
            </div>
            <div class="col d-flex justify-content-end">
                @if (NextCronJobCycle is not null)
                {
                    <h5 class="d-inline align-middle">
                        <HxBadge Type="BadgeType.RoundedPill" Color="ThemeColor.Success">
                            <HxIcon Icon="BootstrapIcon.Clock"></HxIcon>
                            <span class="ms-2">
                                @($"{NextCronJobCyleTime}")
                            </span>
                        </HxBadge>
                        <HxBadge CssClass="ms-2" Type="BadgeType.RoundedPill" Color="ThemeColor.Secondary">
                            @if (!string.IsNullOrEmpty(TimeUntilCycleText))
                            {
                                <span>@TimeUntilCycleText</span>
                            }
                        </HxBadge>
                    </h5>
                }
                else
                {
                    <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                }
            </div>
        </div>
    </div>
</div>
<DownloadQueComponent OnDownloadSkippOrRemove="@OnDownloadSkipped"></DownloadQueComponent>


@code {
    private ConvertProgressModel? ConvertProgress;
    private DownloadModel? Download;
    private ConverterState ConverterState = ConverterState.Idle;
    private CronJobState CronJobState = CronJobState.WaitForNextCycle;

    private CronJob? CronJob;

    private bool CheckDownloadsButtonEnabled { get; set; } = false;
    private bool CheckDownloadsButtonSpinner { get; set; } = false;

    private bool EditConverterSettingsButtonEnabled { get; set; } = true;

    private bool StopConverterButtonEnabled { get; set; } = false;

    private DateTime? NextCronJobCycle = default;
    private TimeOnly NextCronJobCyleTime;
    private System.Timers.Timer? TmNextCycle;
    private TimeSpan? TimeUntilCycle;
    private string? TimeUntilCycleText;

    private int DownloadQueCount;
    private int LanguageDownloadCount;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ConverterState = ConverterService.GetConverterState();

            CronJob = new(CronJobLogger, ApiService, CS, AppLifetime);

            CronJob.RemoveHandlers();

            CronJob.CronJobEvent += CronJobEvent;
            CronJob.CronJobErrorEvent += CronJobErrorEvent;
            CronJob.CronJobDownloadsEvent += CronJobDownloads;
            ConverterService.ConvertProgressChanged += Converter_ConvertProgressChanged;
            ConverterService.ConverterStateChanged += Converter_ConverterStateChanged;

            if (TmNextCycle is null)
            {
                TmNextCycle = new()
                    {
                        AutoReset = true,
                        Interval = 1000
                    };

                TmNextCycle.Elapsed += RefreshCycleTime;
            }

            if (!TmNextCycle.Enabled)
            {
                TmNextCycle.Start();
            }

            SetDownloadCounters();
            HandleCronJobState();
        }

        base.OnAfterRender(firstRender);
    }

    private void RefreshCycleTime(Object? source, System.Timers.ElapsedEventArgs e)
    {
        if (CronJob.NextRun is null)
            return;

        NextCronJobCycle = CronJob.NextRun.Value;
        NextCronJobCyleTime = TimeOnly.FromDateTime(NextCronJobCycle.Value);

        if (NextCronJobCycle < DateTime.Now.ToLocalTime())
        {
            TimeUntilCycle = new TimeSpan(0, 0, 0);
        }
        else
        {
            TimeUntilCycle = NextCronJobCycle?.Subtract(DateTime.Now.ToLocalTime());
        }

        TimeUntilCycleText = "";

        if (TimeUntilCycle?.Hours > 0)
        {
            TimeUntilCycleText = $"{TimeUntilCycle:hh} Stunden";
        }

        if (TimeUntilCycle?.Minutes > 0)
        {
            TimeUntilCycleText += $" {TimeUntilCycle:mm} Minuten";
        }

        TimeUntilCycleText += $" {TimeUntilCycle:ss} Sekunden";

        InvokeAsync(() => StateHasChanged());
    }

    private void MoveToConverterSettings()
    {
        NavigationManager.NavigateTo(Routes.ConverterSettings);
    }

    private void Converter_ConvertProgressChanged(ConvertProgressModel convertProgress)
    {
        ConvertProgress = convertProgress;
        InvokeAsync(() => StateHasChanged());
    }

    private void CronJobDownloads(int downloadCount, int languageDownloadCount)
    {
        DownloadQueCount = downloadCount;
        LanguageDownloadCount = languageDownloadCount;

        InvokeAsync(() => StateHasChanged());
    }

    private void CronJobEvent(CronJobState jobState)
    {
        HandleCronJobState(true);
    }

    private void CronJobErrorEvent(MessageType messageType, string message)
    {
        CronJobLogger.LogInformation(message);
        ToastService.AddMessage(message, messageType);
    }

    private void SetDownloadCounters()
    {
        DownloadQueCount = CronJob.DownloadCount;
        LanguageDownloadCount = CronJob.LanguageDownloadCount;
    }

    private void HandleCronJobState(bool fromEvent = false)
    {
        CronJobState = CronJob.CronJobState;

        Download = ConverterService.GetDownload();
        SetDownloadCounters();

        switch (CronJobState)
        {
            case CronJobState.WaitForNextCycle:
                CheckDownloadsButtonEnabled = true;
                CheckDownloadsButtonSpinner = false;
                StopConverterButtonEnabled = false;
                EditConverterSettingsButtonEnabled = true;
                break;

            case CronJobState.Running:
                CheckDownloadsButtonEnabled = false;
                CheckDownloadsButtonSpinner = false;
                StopConverterButtonEnabled = true;
                EditConverterSettingsButtonEnabled = false;
                break;

            case CronJobState.CheckingForDownloads:
                CheckDownloadsButtonEnabled = false;
                CheckDownloadsButtonSpinner = true;
                ToastService.AddMessage(InfoMessage.CheckingForDownloads, MessageType.Info);
                break;
            default:
                break;
        }

        if (fromEvent)
        {
            InvokeAsync(() => StateHasChanged());
        }
        else
        {
            StateHasChanged();
        }
    }

    private void Converter_ConverterStateChanged(ConverterState state, DownloadModel? download)
    {
        ConverterState = state;

        switch (state)
        {
            case ConverterState.Downloading:
                if (download is null)
                {
                    DashboardLogger.LogWarning($"{DateTime.Now} | {WarningMessage.ConverterDownloadStateNoData}");
                }
                else
                {
                    Download = download;
                }
                break;
            case ConverterState.Idle:
                Download = default;
                ConvertProgress = default;
                break;
            case ConverterState.Undefined:
            default:
                return;
        }

        InvokeAsync(() => StateHasChanged());
    }

    private async Task CheckForDownloads()
    {
        if (CronJob is null)
            CronJob = new(CronJobLogger, ApiService, CS, AppLifetime);

        await CronJob.CheckForNewDownloads();
    }

    private void StopConverter()
    {
        ConverterService.Abort();
    }

    private void OnDownloadSkipped(int newDownloadCount)
    {
        DownloadQueCount = newDownloadCount;
    }
}