@attribute [Route(Routes.Settings)]
@inject IApiService ApiService
@inject NavigationManager NavigationManager
@inject IHxMessengerService ToastService
@using System.ComponentModel.DataAnnotations

<PageTitle>Einstellungen</PageTitle>

<div class="container">
    <EditForm Model="@DownloaderPreferences" OnValidSubmit="@(() => SavePreferences())">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-sm-auto">
                <div class="px-3 py-2">
                    <div class="my-2">
                        <HxIcon CssClass="d-inline fs-5 text-primary" Icon="BootstrapIcon.Gear"></HxIcon>
                        <h5 class="d-inline px-2">Generell:</h5>
                    </div>
                    <label class="text-warning mt-2">Interval (in Minuten)</label>
                    <HxInputNumber InputSize="InputSize.Small" CssClass="mt-2" Decimals="0" TValue="int" @bind-Value="DownloaderPreferences.Interval" />
                </div>
            </div>
            <div class="col-sm-auto">
                <div class="px-3 py-2">
                    <div class="my-2">
                        <HxIcon CssClass="d-inline fs-5 text-primary" Icon="BootstrapIcon.PlayFill"></HxIcon>
                        <h5 class="d-inline px-2">Start:</h5>
                    </div>
                    <HxCheckbox CssClass="mt-2" TextCssClass="text-warning" Inline="true" @bind-Value="DownloaderPreferences.AutoStart" Text="Autom. Downloads starten nach dem Einloggen" />
                </div>
            </div>
            <div class="col-sm-auto">
                <div class="px-3 py-2">
                    <div class="my-2">
                        <HxIcon CssClass="d-inline fs-5 text-primary" Icon="BootstrapIcon.Telegram"></HxIcon>
                        <h5 class="d-inline px-2">Telegram:</h5>
                    </div>
                    <HxCheckbox CssClass="mt-2" TextCssClass="text-warning" Inline="true" @bind-Value="DownloaderPreferences.TelegramCaptchaNotification" Text="Benachrichtigen wenn ein Captcha gelöst werden muss" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-auto">
                <div class="px-3 py-2">
                    <div class="my-2">
                        <HxIcon CssClass="d-inline fs-5 text-primary" Icon="BootstrapIcon.Activity"></HxIcon>
                        <h5 class="d-inline px-2">Proxy:</h5>
                    </div>
                    <HxCheckbox CssClass="mt-2" TextCssClass="d-inline text-warning" Inline="true" @bind-Value="DownloaderPreferences.UseProxy" Text="Proxy nutzen" />
                </div>
            </div>
            <div class="col mt-3">
                <label class="text-warning my-2">Proxy Adresse:</label>
                <HxInputText Placeholder="p.webshare.io" InputSize="InputSize.Small" @bind-Value="DownloaderPreferences.ProxyUri" />
            </div>
            <div class="col mt-3">
                <label class="text-warning my-2">Benutzername:</label>
                <HxInputText InputSize="InputSize.Small" @bind-Value="DownloaderPreferences.ProxyUsername" />
            </div>
            <div class="col mt-3">
                <label class="text-warning my-2">Passwort:</label>
                <HxInputText Type="InputType.Password" InputSize="InputSize.Small" @bind-Value="DownloaderPreferences.ProxyPassword" />
            </div>
        </div>
        <div class="row mt-4">
            <div class="col-6">
                <HxSubmit Color="ThemeColor.Success" Icon="BootstrapIcon.Check" CssClass="w-100">Speichern</HxSubmit>
            </div>
            <div class="col-6">
                <HxButton Outline="true" Color="ThemeColor.Warning" Icon="BootstrapIcon.XCircle" CssClass="w-100" OnClick="NavigateBack">Abbrechen</HxButton>
            </div>
        </div>
    </EditForm>
</div>

@code {
    private DownloaderPreferencesModel? DownloaderPreferences = new();

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            DownloaderPreferences = await ApiService.GetAsync<DownloaderPreferencesModel?>("getDownloaderPreferences");

            if (DownloaderPreferences is null)
            {
                ToastService.AddMessage(ErrorMessage.RetrieveDownloaderPreferencesFail, MessageType.Error);
                NavigateBack();
                return;
            }

            StateHasChanged();
        }
    }

    private async Task SavePreferences()
    {
        bool success = await ApiService.SetDownloaderPreferences(DownloaderPreferences);

        if (!success)
        {
            ToastService.AddMessage(ErrorMessage.DownloaderPreferencesSaveFail, MessageType.Error);
            return;
        }

        ToastService.AddMessage(InfoMessage.DownloaderPreferencesSaved, MessageType.Success);

        await Task.Delay(1000);

        NavigateBack();
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo(Routes.Dashboard);
    }
}
